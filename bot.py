import logging
import random
import smtplib
import re
import asyncio
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncpg
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
TOKEN = '8182061892:AAHnfK9k5g4gaaUlEK8plhdFdVHKzHQzYg4'

# Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SMTP_SERVER = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
SMTP_PORT = int(os.getenv('SMTP_PORT', '587'))
EMAIL_USER = os.getenv('EMAIL_USER', 'glebsem2005@gmail.com')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD', 'kqbkhnqpskiumddc')

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
DATABASE_URL = "postgresql://bot_admin:sber@172.20.10.13:5432/sber_bot"

# –ë–æ—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
STRATEGIES = {
    '–ê–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏': 'api_sand_bot',
    '–°–∫–∞—É—Ç–∏–Ω–≥ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤': 'startupsberaibot',
    '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–¥–µ–ª–∫–∏': 'api_sand_bot',
}

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î
db_pool = None

# –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∑–µ—Ä–≤ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î)
authorized_users_cache = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ telegram_id –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_email_cache = {}  # –°–ª–æ–≤–∞—Ä—å {telegram_id: email} –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

class UserStates(StatesGroup):
    WAITING_EMAIL = State()
    WAITING_CODE = State()

class EmailSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    
    def __init__(self):
        self.smtp_server = SMTP_SERVER
        self.smtp_port = SMTP_PORT
        self.email_user = EMAIL_USER
        self.email_password = EMAIL_PASSWORD
        
        if not self.email_user or not self.email_password:
            logger.warning("Email credentials not configured!")
    
    def generate_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥."""
        return str(random.randint(100000, 999999))
    
    async def send_verification_code(self, recipient_email: str, code: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ email."""
        if not self.email_user or not self.email_password:
            logger.error("Email credentials not configured")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart()
            msg['From'] = f"–°–±–µ—Ä CPNB Bot <{self.email_user}>"
            msg['To'] = recipient_email
            msg['Subject'] = "–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –°–±–µ—Ä CPNB Bot"
            
            # –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
            body = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ –°–±–µ—Ä CPNB:

{code}

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –°–±–µ—Ä CPNB"""
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.email_user, self.email_password)
            text = msg.as_string()
            server.sendmail(self.email_user, recipient_email, text)
            server.quit()
            
            logger.info(f"Verification code sent to {recipient_email}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send email to {recipient_email}: {e}")
            return False

email_sender = EmailSender()

async def test_database_connection() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–π–º–∞—É—Ç–æ–º."""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        conn = await asyncio.wait_for(
            asyncpg.connect(DATABASE_URL), 
            timeout=10.0  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        result = await asyncio.wait_for(
            conn.fetchval("SELECT 1"), 
            timeout=5.0
        )
        
        await conn.close()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except asyncio.TimeoutError:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def load_authorized_users_to_cache():
    global authorized_users_cache, users_email_cache, db_pool  # ‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω—ã
    
    if not db_pool:  # ‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        
    try:
        async with db_pool.acquire() as connection:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await asyncio.wait_for(
                connection.fetch("SELECT users_id, email FROM users"),
                timeout=15.0
            )
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
            authorized_users_cache.clear()
            users_email_cache.clear()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à
            for user in users:
                user_id = user['users_id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞
                email = user['email']
                authorized_users_cache.add(user_id)
                users_email_cache[user_id] = email
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(authorized_users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à")
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(authorized_users_cache)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à")
            return True
            
    except asyncio.TimeoutError:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à")
        logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        return False
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    global db_pool
    
    try:
        print("üîó –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î...")
        print(f"üì° –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {DATABASE_URL}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not await test_database_connection():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        print("üèä –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        db_pool = await asyncio.wait_for(
            asyncpg.create_pool(
                DATABASE_URL,
                min_size=1,
                max_size=3,  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
                command_timeout=20,  # –¢–∞–π–º–∞—É—Ç –∫–æ–º–∞–Ω–¥
                server_settings={
                    'jit': 'off',  # –û—Ç–∫–ª—é—á–∞–µ–º JIT –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    'application_name': 'telegram_bot'
                }
            ),
            timeout=30.0  # –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞
        )
        
        print("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–ª
        async with db_pool.acquire() as connection:
            print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            result = await asyncio.wait_for(
                connection.fetchval("SELECT current_database()"), 
                timeout=10.0
            )
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK, –±–∞–∑–∞: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
            table_exists = await asyncio.wait_for(
                connection.fetchval("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'users'
                    )
                """),
                timeout=10.0
            )
            
            if table_exists:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–∞–π–¥–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                columns = await asyncio.wait_for(
                    connection.fetch("""
                        SELECT column_name, data_type 
                        FROM information_schema.columns 
                        WHERE table_name = 'users'
                        ORDER BY ordinal_position
                    """),
                    timeout=10.0
                )
                
                print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã 'users':")
                for col in columns:
                    print(f"   - {col['column_name']}: {col['data_type']}")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è user_id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                user_id_column = None
                for col in columns:
                    if col['column_name'] in ['user_id', 'users_id', 'telegram_id']:
                        user_id_column = col['column_name']
                        break
                
                if user_id_column:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è Telegram ID: {user_id_column}")
                else:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è Telegram ID!")
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'users' –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É
                print("üî® –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É 'users'...")
                await connection.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id SERIAL PRIMARY KEY,
                        users_id BIGINT UNIQUE NOT NULL,
                        email VARCHAR(255) NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–∑–¥–∞–Ω–∞")
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à
        await load_authorized_users_to_cache()
        
        return True
        
    except asyncio.TimeoutError:
        print("‚ùå –¢–ê–ô–ú–ê–£–¢ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False
    except Exception as e:
        print(f"‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        traceback.print_exc()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def check_user_authorized(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–Ω–∞—á–∞–ª–∞ –≤ –∫—ç—à–µ, –∑–∞—Ç–µ–º –≤ –ë–î)."""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ
    if user_id in authorized_users_cache:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
        return True
    
    # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ª–∞–≥–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∫—ç—à
    if not db_pool:
        print(f"‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ - –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–æ—Å—Ç—É–ø–µ")
        return False
        
    try:
        async with db_pool.acquire() as connection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
            result = await asyncio.wait_for(
                connection.fetchval(
                    "SELECT EXISTS(SELECT 1 FROM users WHERE users_id = $1)",
                    user_id
                ),
                timeout=10.0
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            if result:
                authorized_users_cache.add(user_id)
                # –ü–æ–ª—É—á–∞–µ–º email –¥–ª—è –∫—ç—à–∞
                email = await asyncio.wait_for(
                    connection.fetchval(
                        "SELECT email FROM users WHERE users_id = $1",
                        user_id
                    ),
                    timeout=5.0
                )
                if email:
                    users_email_cache[user_id] = email
                    
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –ë–î: {'‚úÖ –Ω–∞–π–¥–µ–Ω' if result else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            return bool(result)
            
    except asyncio.TimeoutError:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –∫—ç—à")
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return user_id in authorized_users_cache
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e} - –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –∫—ç—à")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return user_id in authorized_users_cache

async def remove_authorized_user(user_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏ –∫—ç—à–∞ (–≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞)."""
    
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
    authorized_users_cache.discard(user_id)  # discard –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç
    users_email_cache.pop(user_id, None)  # pop —Å default –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
    
    if not db_pool:
        print(f"‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∏–∑ –∫—ç—à–∞")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω —Ç–æ–ª—å–∫–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞")
        return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞
        
    try:
        async with db_pool.acquire() as connection:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            result = await asyncio.wait_for(
                connection.execute(
                    'DELETE FROM users WHERE users_id = $1', 
                    user_id
                ),
                timeout=10.0
            )
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î –∏ –∫—ç—à–∞")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        return True
        
    except asyncio.TimeoutError:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ë–î, –Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞")
        logger.error(f"–¢–∞–π–º–∞—É—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ë–î")
        return True  # –£–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}, –Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞")
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}")
        return True  # –£–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞

def is_valid_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email."""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_name = f'{message.from_user.first_name} {message.from_user.last_name}'
    
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user_name})')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    is_authorized = await check_user_authorized(user_id)
    
    if is_authorized:
        logger.info(f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        await show_strategies(message)
    else:
        logger.info(f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email')
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–±–µ—Ä CPNB Bot!\n\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.\n"
            "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
        )
        await UserStates.WAITING_EMAIL.set()

async def show_strategies(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    for name, username in STRATEGIES.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        bot_url = f"https://t.me/{username}?start=ref_{message.from_user.id}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        keyboard.add(types.InlineKeyboardButton(name, url=bot_url))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
    keyboard.add(types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="logout"))
    
    await message.answer(
        "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", 
        reply_markup=keyboard
    )

@dp.message_handler(state=UserStates.WAITING_EMAIL)
async def process_email(message: types.Message, state: FSMContext):
    email = message.text.strip().lower()
    
    if not is_valid_email(email):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email:")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
    code = email_sender.generate_code()
    
    await message.answer("üìß –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –Ω–∞ –≤–∞—à email...")
    
    success = await email_sender.send_verification_code(email, code)
    
    if not success:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞ email.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ email –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        email=email,
        verification_code=code,
        user_id=message.from_user.id
    )
    
    await message.answer(
        f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}\n\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞:"
    )
    await UserStates.WAITING_CODE.set()

@dp.message_handler(state=UserStates.WAITING_CODE)
async def process_verification_code(message: types.Message, state: FSMContext):
    entered_code = message.text.strip()
    user_data = await state.get_data()
    
    correct_code = user_data.get('verification_code')
    
    if entered_code != correct_code:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞:"
        )
        return
    
    # –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = user_data.get('user_id')
    email = user_data.get('email')
    
    success = await add_authorized_user(user_id, email)
    
    if success:
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        await state.finish()
        await show_strategies(message)
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'logout')
async def process_logout(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    user_id = callback_query.from_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    await callback_query.answer("–í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...")
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    success = await remove_authorized_user(user_id)
    
    if success:
        await callback_query.message.edit_text(
            "üö™ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã—à–µ–ª –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
    else:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã: /start - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        )

@dp.message_handler(commands=['logout'])
async def logout_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_authorized = await check_user_authorized(user_id)
    
    if not is_authorized:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_logout"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_logout")
    )
    
    await message.answer(
        "üö™ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?\n\n"
        "–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email.",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == 'confirm_logout')
async def confirm_logout(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    user_id = callback_query.from_user.id
    
    await callback_query.answer("–í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...")
    
    success = await remove_authorized_user(user_id)
    
    if success:
        await callback_query.message.edit_text(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.callback_query_handler(lambda c: c.data == 'cancel_logout')
async def cancel_logout(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞."""
    await callback_query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback_query.message.edit_text(
        "‚ùå –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º."
    )

@dp.message_handler(commands=['dbstatus'])
async def db_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ë–î –∏ –∫—ç—à–∞."""
    status_lines = []
    
    # –°—Ç–∞—Ç—É—Å –∫—ç—à–∞
    cache_count = len(authorized_users_cache)
    status_lines.append(f"üì¶ –ö—ç—à: {cache_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –°—Ç–∞—Ç—É—Å –ë–î
    if not db_pool:
        status_lines.append("‚ùå –ë–î: –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    else:
        try:
            async with db_pool.acquire() as connection:
                result = await asyncio.wait_for(
                    connection.fetchval("SELECT COUNT(*) FROM users"),
                    timeout=5.0
                )
                status_lines.append(f"‚úÖ –ë–î: {result} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            status_lines.append(f"‚ùå –ë–î: –æ—à–∏–±–∫–∞ - {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    in_cache = user_id in authorized_users_cache
    status_lines.append(f"üë§ –í—ã –≤ –∫—ç—à–µ: {'‚úÖ' if in_cache else '‚ùå'}")
    
    await message.answer("\n".join(status_lines))

@dp.message_handler()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
    )

async def on_startup(dp):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        db_success = await init_database()
        
        if db_success:
            print("üöÄ –ë–æ—Ç-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å –ë–î")
            logger.info("üöÄ –ë–æ—Ç-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —Å –ë–î")
        else:
            print("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ë–ï–ó –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            logger.warning("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ë–ï–ó –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ë–ï–ó –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

async def on_shutdown(dp):
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ."""
    global db_pool
    if db_pool:
        print("üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        await db_pool.close()
        print("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç")

if __name__ == '__main__':
    executor.start_polling(
        dp, 
        skip_updates=True, 
        on_startup=on_startup,
        on_shutdown=on_shutdown
    )