import asyncio
import asyncpg

async def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ."""
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    database_names = [
        "—Å–±–µ—Ä–±–æ—Ç",
        "sber_bot", 
        "sberbot",
        "postgres",
        "—Å–±–µ—Ä",
        "cpnb_bot"
    ]
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users = [
        ("bot_admin", "sber"),
        ("bot_reader", "sber"),
        ("postgres", ""),  # –±–µ–∑ –ø–∞—Ä–æ–ª—è
        ("postgres", "sber"),
    ]
    
    host = "172.20.10.13"
    port = 5432
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    for db_name in database_names:
        for user, password in users:
            try:
                if password:
                    connection_string = f"postgresql://{user}:{password}@{host}:{port}/{db_name}"
                else:
                    connection_string = f"postgresql://{user}@{host}:{port}/{db_name}"
                
                print(f"\nüì° –ü—Ä–æ–±—É–µ–º: {connection_string}")
                
                conn = await asyncpg.connect(connection_string)
                result = await conn.fetchval("SELECT current_database()")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ authorized_users
                table_exists = await conn.fetchval("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'authorized_users'
                    )
                """)
                
                await conn.close()
                
                print(f"‚úÖ –£–°–ü–ï–•! –ë–∞–∑–∞: {result}")
                print(f"üìã –¢–∞–±–ª–∏—Ü–∞ authorized_users: {'‚úÖ –µ—Å—Ç—å' if table_exists else '‚ùå –Ω–µ—Ç'}")
                print(f"üîó –†–∞–±–æ—á–∞—è —Å—Ç—Ä–æ–∫–∞: {connection_string}")
                return connection_string, table_exists
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}...")
    
    print("\n‚ùå –ù–∏ –æ–¥–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ!")
    return None, False

if __name__ == "__main__":
    asyncio.run(test_database_connection())